/*
please give constraints for <problem-no.> as follows:
case <problem-no.>:
	g[0]=first inequality constraint;
	...
	g[#inequalities-1]=last inequality constraint;
	h[0]=first equality constraint;
	...
	h[#equalities-1]=last equality constraint;
*/

case 101: /* g01 */
case 1:
	g[0]=2*(x[0]+x[1])+x[9]+x[10]-10;
	g[1]=2*(x[0]+x[2])+x[9]+x[11]-10;
	g[2]=2*(x[1]+x[2])+x[10]+x[11]-10;
	g[3]=-8*x[0]+x[9];
	g[4]=-8*x[1]+x[10];
	g[5]=-8*x[2]+x[11];
	g[6]=-2*x[3]-x[4]+x[9];
	g[7]=-2*x[5]-x[6]+x[10];
	g[8]=-2*x[7]-x[8]+x[11];
	break;
case 102: /* g02 */
case 2:
	{ int i; VALUE v1, v2;
		v1=1.0; v2=0.0;
		for(i=0; i<Length; i++) {
			v1*=x[i];
			v2+=x[i];
		}
		g[0]=0.75-v1;
		g[1]=v2-7.5*Length;
	}
	break;
case 103: /* g03 */
case 3:
	{ int i;
		h[0]=0.0;
		for(i=0; i<Length; i++)
			h[0]+=square(x[i]);
		h[0]-=1;
	}
	break;
case 104: /* g04 */
case 4:
	g[0]=85.334407+0.0056858*x[1]*x[4]+0.0006262*x[0]*x[3]-0.0022053*x[2]*x[4]-92;
	g[1]=80.51249+0.0071317*x[1]*x[4]+0.0029955*x[0]*x[1]+0.0021813*x[2]*x[2]-110;
	g[2]=9.300961+0.0047026*x[2]*x[4]+0.0012547*x[0]*x[2]+0.0019085*x[2]*x[3]-25;
	g[3]=-(85.334407+0.0056858*x[1]*x[4]+0.0006262*x[0]*x[3]-0.0022053*x[2]*x[4]);
	g[4]=-(80.51249+0.0071317*x[1]*x[4]+0.0029955*x[0]*x[1]+0.0021813*x[2]*x[2]-90);
	g[5]=-(9.300961+0.0047026*x[2]*x[4]+0.0012547*x[0]*x[2]+0.0019085*x[2]*x[3]-20);
	break;
case 105: /* g05 */
case 5:
	g[0]=-(x[3]-x[2]+0.55);
	g[1]=-(x[2]-x[3]+0.55);
	h[0]=1000*(sin(-x[2]-0.25)+sin(-x[3]-0.25))+894.8-x[0];
	h[1]=1000*(sin(x[2]-0.25)+sin(x[2]-x[3]-0.25))+894.8-x[1];
	h[2]=1000*(sin(x[3]-0.25)+sin(x[3]-x[2]-0.25))+1294.8;
	break;
case 106: /* g06 */
case 6:
	{ VALUE v2;
		v2=square(x[1]-5);
		g[0]=-(square(x[0]-5)+v2-100);
		g[1]=square(x[0]-6)+v2-82.81;
	}
	break;
case 107: /* g07 */
case 7:
	g[0]=-(105-4*x[0]-5*x[1]+3*x[6]-9*x[7]);
	g[1]=-(-10*x[0]+8*x[1]+17*x[6]-2*x[7]);
	g[2]=-(8*x[0]-2*x[1]-5*x[8]+2*x[9]+12);
	g[3]=-(-3*square(x[0]-2)-4*square(x[1]-3)-2*square(x[2])+7*x[3]+120);
	g[4]=-(-5*square(x[0])-8*x[1]-square(x[2]-6)+2*x[3]+40);
	g[5]=-(-square(x[0])-2*square(x[1]-2)+2*x[0]*x[1]-14*x[4]+6*x[5]);
	g[6]=-(-0.5*square(x[0]-8)-2*square(x[1]-4)-3*square(x[4])+x[5]+30);
	g[7]=-(3*x[0]-6*x[1]-12*square(x[8]-8)+7*x[9]);
	break;
case 108: /* g08 */
case 8:
	g[0]=square(x[0])-x[1]+1;
	g[1]=1-x[0]+square(x[1]-4);
	break;
case 109: /* g09 */
case 9:
	g[0]=-(127-2*square(x[0])-3*square(x[1]*x[1])-x[2]-4*square(x[3])-5*x[4]);
	g[1]=-(282-7*x[0]-3*x[1]-10*square(x[2])-x[3]+x[4]);
	g[2]=-(196-23*x[0]-square(x[1])-6*square(x[5])+8*x[6]);
	g[3]=-(-4*square(x[0])-square(x[1])+3*x[0]*x[1]-2*square(x[2])-5*x[5]+11*x[6]);
	break;
case 110: /* g02 */
case 10:
	g[0]=-(1-0.0025*(x[3]+x[5]));
	g[1]=-(1-0.0025*(x[4]+x[6]-x[3]));
	g[2]=-(1-0.01*(x[7]-x[4]));
	g[3]=-(x[0]*x[5]-833.33252*x[3]-100*x[0]+83333.333);
	g[4]=-(x[1]*x[6]-1250*x[4]-x[1]*x[3]+1250*x[3]);
	g[5]=-(x[2]*x[7]-1250000-x[2]*x[4]+2500*x[4]);
	break;
case 111: /* g11 */
case 11:
	h[0]=x[1]-square(x[0]);
	break;
case 112: /* g12 */
case 12:
	{ int i; int p[3]; double e;
		g[0]=1.0e10;
		for(i=0; i<3; i++) p[i]=1;
		while(1) {
//			printf("%d %d %d\n", p[0], p[1], p[2]);
			e=square(x[0]-p[0])+square(x[1]-p[1])+square(x[2]-p[2])-0.0625;
			if(e<=0) {
				g[0]=0;
				break;
			}
			if(e<g[0]) g[0]=e;
			for(i=2; i>=0; i--) {
				p[i]++;
				if(p[i]<10) break;
				if(i==0) goto end112;
				p[i]=1;
			}
		}
		end112:;
	}
	break;
case 113: /* g13 */
case 13:
	h[0]=square(x[0])+square(x[1])+square(x[2])+square(x[3])+square(x[4])-10;
	h[1]=x[1]*x[2]-5*x[3]*x[4];
	h[2]=x[0]*x[0]*x[0]+x[1]*x[1]*x[1]+1;
	break;
case 120:
	g[0]=square(x[0])+square(x[1])-4;
	break;
case 200: /* Himmelblau */
	{ double g1, g2, g3;
		g1=85.334407+0.0056858*x[1]*x[4]+0.00026*x[0]*x[3]-0.0022053*x[2]*x[4];
		g2=80.51249+0.0071317*x[1]*x[4]+0.0029955*x[0]*x[1]+0.0021813*square(x[2]);
		g3=9.300961+0.0047026*x[2]*x[4]+0.0012547*x[0]*x[2]+0.0019085*x[2]*x[3];
		g[0]=-g1;
		g[1]=g1-92;
		g[2]=90-g2;
		g[3]=g2-110;
		g[4]=20-g3;
		g[5]=g3-25;
	}
	break;
case 201: /* welded beam design */
#define P	6000
#define L	14
#define E	30e6
#define G	12e6
#define TauMax	13600
#define SigmaMax	30000
#define DeltaMax	0.25
	{ double tau1, M, R, J, tau2, tau, sigma, delta, Pc;
	tau1=P/(M_SQRT2*x[0]*x[1]);
	M=P*(L+x[1]/2);
	R=sqrt((square(x[1])+square(x[0]+x[2]))/4);
	J=2*M_SQRT2*x[0]*x[1]*(square(x[1])/12+square(x[0]+x[2])/4);
	tau2=M*R/J;
	tau=sqrt(square(tau1)+tau1*tau2*x[1]/R+square(tau2));
	sigma=6*P*L/(x[3]*square(x[2]));
	delta=4*P*cubic(L)/(E*cubic(x[2])*x[3]);
	Pc=4.013*E*sqrt(square(x[2])*square(cubic(x[3]))/36)/square(L)*(1-x[2]/(2*L)*sqrt(E/(4*G)));
	g[0]=tau-TauMax;
	g[1]=sigma-SigmaMax;
	g[2]=x[0]-x[3];
	g[3]=0.10471*square(x[0])+0.04811*x[2]*x[3]*(14+x[1])-5.0;
	g[4]=0.125-x[0];
	g[5]=delta-DeltaMax;
	g[6]=P-Pc;
	}
#undef P
#undef L
#undef E
#undef G
#undef TauMax
#undef SigmaMax
#undef DeltaMax
	break;
case 202: /* pressure vessel */
{ double Ts, Th;
	Ts=(int)x[0]*0.0625;
	Th=(int)x[1]*0.0625;
	g[0]=-Ts+0.0193*x[2];
	g[1]=-Th+0.00954*x[2];
	g[2]=-M_PI*square(x[2])*x[3]-4*M_PI/3*cubic(x[2])+1296000;
	g[3]=x[3]-240;
}
	break;
case 301: /* largest small polygon */
{ int i, j, k; int Nv=Length/2+1; double *theta=&x[Nv-1];
#define r x
	for(k=0; k<Nv-2; k++)
		g[k]=theta[k]-theta[k+1];
// satisfied by range definition
//	g[k++]=theta[k]-M_PI;
	for(i=0; i<Nv-1; i++) {
		for(j=i+1; j<Nv-1; j++)
			g[k++]=square(r[i])+square(r[j])-2*r[i]*r[j]*cos(theta[j]-theta[i])-1;
// satisfied by range definition
//		g[k++]=square(r[i])-1;
	}
#undef r
}
	break;
case 302: /* Distribution of Electrons on a Sphere */
{ int i; int Np=Length/3;
  VARIABLE *y=&x[Np], *z=&x[Np+Np], v;

	for(i=0; i<Np; i++) {
		v=square(x[i])+square(y[i])+square(z[i]);
		h[i]=v-1;
#if 1
		if(h[i]>Delta) {
			v=square(x[i])+square(y[i]);
			if(v<=1) v=sqrt(1-v);
			z[i]=(z[i]>=0? v : -v);
			h[i]=square(x[i])+square(y[i])+square(z[i])-1;
		}
//		printf("h[%d]=%g\n", i, h[i]);
#endif
	}
}
	break;
case 303: /* shape optimization of a cam */
{ int i, k; double Rmin=Ranges[1].min, Rmax=Ranges[1].max;
#define N Length
#define r x
#define Alpha 1.5
	double theta=2*M_PI/(5*(N+1));
	double cos_theta=cos(theta);

	k=1;
// nonlinear constraints
/* i=0 */ g[k++]=2*Rmin*r[1]*cos_theta-Rmin*(Rmin+r[1]);
/* i=1 */ g[k++]=2*Rmin*r[2]*cos_theta-r[1]*(Rmin+r[2]);
	for(i=1; i<N-1; i++)
		g[k++]=2*r[i-1]*r[i+1]*cos_theta-r[i]*(r[i-1]+r[i+1]);
/* i=N */   g[k++]=2*r[N-1]*Rmax*cos_theta-r[N]*(r[N-1]+Rmax);
/* i=N+1 */ g[k++]=2*r[N]*r[N]*cos_theta-Rmax*(r[N]+r[N]);

// linear constraints
/* i=0 */ g[k++]=fabs(r[1]-Rmin)-Alpha*theta;
	for(i=0; i<N-1; i++)
		g[k++]=fabs(r[i+1]-r[i])-Alpha*theta;
/* i=N */ g[k++]=fabs(Rmax-r[N])-Alpha*theta;
#undef N
#undef r
#undef Alpha
}
	break;
